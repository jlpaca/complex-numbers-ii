\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{kf-complex}[2019/07/12 animating complex numbers in tikz-kf]

\RequirePackage{tikz-kf}

%% COLOUR SCHEME

% dark (background) sequence
\definecolor{bg-a}{gray}{0}
\definecolor{bg-b}{gray}{0.5}

% light (foreground) sequence
\definecolor{fg-a}{gray}{1}
\definecolor{fg-b}{gray}{0.8}

% default background & foreground colours
\pagecolor{bg-a}
\color{fg-a}



%% COMPLEX NUMBERS %%
% set up pgfkeys and default transition arguments
\newcommand\zdt{0.4}

% grid
\pgfkeys{
  /z/grid/.is family, /z/grid,
  in/.store in=\tin,
  default/.style={
    in=0
  }
}
\newcommand\zgrid[4][]{{
    \pgfkeys{/z/grid, default, #1}
    
    \begin{scope}[shift={(#2, #3)}]

      \kfinterpolate[start=\tin, duration=\zdt]{-#2}{\kfwidth-#2}
      \pgfmathsetmacro\x\pgfmathresult
      \kfinterpolate[start=\tin, duration=\zdt]{-#3}{\kfheight-#3}
      \pgfmathsetmacro\y\pgfmathresult

      \draw[bg-b] (-#2, 0) -- (\x, 0);
      \draw[bg-b] (0, -#3) -- (0, \y);
      
      #4    
    \end{scope}
}}

% draw a complex number
\newcommand\z[3][]{{
    \pgfmathsetmacro\zre{(#2)*cos(#3 r)}
    \pgfmathsetmacro\zim{(#2)*sin(#3 r)}

    \draw (0, 0) -- (\zre, \zim);
    \fill (\zre, \zim) circle (0.12);
}}

% draw the argument of a complex number as an arrow
\pgfkeys{
  /z/arg/.is family, /z/arg,
  origin/.estore in=\z@arg@origin,
  radius/.estore in=\z@arg@radius,
  offset/.estore in=\z@arg@offset,
  default/.style={
    origin=0,
    radius=1,
    offset=0.1
  }
}
\newcommand\zarg[2][]{{
    \pgfkeys{/z/arg, default, #1}
    % render the arrow
    \pgfmathsetmacro\kf@x@b{((#2) > (\z@arg@origin) ? 1 : 1)*\z@arg@offset} % offset with correct sign
    \pgfmathsetmacro\kf@x@a{(\z@arg@origin)+\kf@x@b}
    % arrow is only visible if it is pointed in the correct direction
    \pgfmathtruncatemacro\kf@x@c{abs((#2)-(\z@arg@origin)) > 2*\z@arg@offset) ? 1 : 0}
    \ifnum\kf@x@c=1
    \pgfkeys{/pgf/fpu=false}
    \draw[->,>=stealth] (
         {\z@arg@radius*cos(\kf@x@a r)},
         {\z@arg@radius*sin(\kf@x@a r)}
         ) arc (\kf@x@a r:((#2)-\kf@x@b) r:1);:\relax
         \pgfkeys{/pgf/fpu=true}
         \fi
}}

\pgfkeys{
  /z/arg/in/.is family, /z/arg/in,
  origin/.estore in=\z@arg@origin,
  in/.estore in=\z@arg@in,
  out/.estore in=\z@arg@out,
  default/.style={
    origin=0,
    in=0,
    out=(\z@arg@in+\zdt),
  }
}
\newcommand\zargin[2][]{{
    \pgfkeys{/z/arg/in, default, #1}
    \kftimemask{\z@arg@in}{\z@arg@out}{
      \kfinterpolate[start=\z@arg@in, duration=\zdt]{\z@arg@origin}{#2}
      \pgfmathsetmacro\z@th\pgfmathresult
      \zarg[origin=\z@arg@origin]{\z@th}
    }
}}

\pgfkeys{
  /z/arg/out/.is family, /z/arg/out,
  origin/.estore in=\z@arg@origin,
  in/.estore in=\z@arg@in,
  out/.store in=\z@arg@out,
  default/.style={
    origin=0,
    in=0,
    out=(\z@arg@in+\zdt/2),
  }
}

\newcommand\zargout[2][]{{
    \pgfkeys{/z/arg/out, default, #1}
    \kftimemask{\z@arg@in}{\z@arg@out}{
      \kfinterpolate[start=\z@arg@out-\zdt/2, duration=\zdt/2]{\z@arg@origin}{#2}
      \pgfmathsetmacro\z@th\pgfmathresult

      % render the arrow & the complex number
      \zarg[origin=\z@th]{#2}
    }
}}

% draw a complex number being extruded from the origin
\pgfkeys{
  /z/in/.is family, /z/in,
  in/.store in=\tin,
  out/.store in=\tout,
  default/.style={
    in=0,
    out=(\tin+\zdt),
  }
}
\newcommand\zin[3][]{{
    \pgfkeys{/z/in, default, #1}
    % #2 - modulus
    % #3 - argument
    \kftimemask{\tin}{\tout}{
      \kfinterpolate[start=\tin, duration=\zdt/2]{0}{#2}
      \pgfmathsetmacro\zr\pgfmathresult

      \kfinterpolate[start=\tin+\zdt/2, duration=\zdt/2]{0}{0.12}
      \pgfmathsetmacro\d\pgfmathresult

      \pgfmathsetmacro\re{\zr*cos(#3 r)}
      \pgfmathsetmacro\im{\zr*sin(#3 r)}
      \draw (0, 0) -- (\re, \im);
      \fill (\re, \im) circle (\d);
      %  \kftext[offset radius=0]{\re}{\im}{oof}
    }
}}

\pgfkeys{
  /z/to/.is family, /z/to,
  in/.store in=\tin,
  out/.store in=\tout,
  default/.style={
    in=0,
    out=(\tin+2*\zdt),
  }
}
\newcommand\zto[5][]{{
    \pgfkeys{/z/to, default, #1}
    % #2 / #4 - start / end modulus
    % #3 / #5 - start / end argument
    \kftimemask{\tin}{\tout}{
      \kfinterpolate[start=\tin, duration=\zdt]{#2}{#4}
      \pgfmathsetmacro\r\pgfmathresult
      \kfinterpolate[start=\tin+\zdt, duration=\zdt]{#3}{#5}
      \pgfmathsetmacro\th\pgfmathresult

      % render the arrow & the complex number
      \zarg[origin=#3]{\th}
      \z{\r}{\th}    
    }
}}

\pgfkeys{
  /z/out/.is family, /z/out,
  in/.store in=\tin,
  out/.store in=\tout,
  default/.style={
    in=0,
    out=(\tin+\zdt),
  }
}

\newcommand\zout[3][]{{
    \pgfkeys{/z/out, default, #1}
    % #2 - modulus
    % #3 - argument
    \kftimemask{\tin}{\tout}{
      \kfinterpolate[start=\tout-\zdt, duration=\zdt/2]{0}{#2}
      \pgfmathsetmacro\r\pgfmathresult

      \kfinterpolate[start=\tout-\zdt/2, duration=\zdt/2]{0.12}{0}
      \pgfmathsetmacro\d\pgfmathresult

      \pgfmathsetmacro\re{\r*cos(#3 r)}
      \pgfmathsetmacro\im{\r*sin(#3 r)}
      \pgfmathsetmacro\ro{(#2)*cos(#3 r)}
      \pgfmathsetmacro\io{(#2)*sin(#3 r)}

      \draw (\re, \im) -- (\ro, \io);
      \fill (\ro, \io) circle (\d);

    }
}}
