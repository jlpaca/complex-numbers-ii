\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{tikz-kf}[2019/07/12 keyframe animation in LaTeX]

\RequirePackage{tikz}
\RequirePackage{xcolor}

% use fpu for everything
\usetikzlibrary{fpu}
\pgfkeys{/pgf/fpu=true, /pgf/fpu/output format=fixed}

%% GLOBALS %%

%% export format sepcification

\newcommand\kf@fps{30}   % 30 frames per second
\newcommand\kf@ppi{600}  % 600 pixels per inch
\newcommand\kf@pxh{1080} % 1080p

\newcommand\kf@width{16} % aspect ratio
\newcommand\kf@height{9} % 16 : 9

%% setter functions
\newcommand\kfsetfps[1]{\renewcommand\kf@fps{#1} \kf@setformat}

%% exposed constants
\newcommand\kfwidth{\kf@width}
\newcommand\kfheight{\kf@height}

%% some constants have to be recalculated from format specs.
\newcommand{\kf@setformat}{
  \pgfmathsetmacro\kf@scale{\kf@pxh/\kf@ppi/\kf@height}
  % x-centre and y-centre.
  \pgfmathsetmacro\kfox{\kf@width/2}
  \pgfmathsetmacro\kfoy{\kf@height/2}
}
\kf@setformat

%% set up pgfkeys
\pgfkeys{/kf/.is family}


%% RENDERING ENVIRONMENT %%

%% a sequence of frames of duration {#1} seconds.
%%
%% also sets macros \f (current frame) and \t (current time, in
%% seconds).

\newcommand{\kfframes}[2]{{
    \pgfmathsetmacro\kf@fcount{max(1, \kf@fps*#1)}
    \foreach \f in {1, ..., \kf@fcount}{
      \pgfmathsetmacro\t{\f/\kf@fps}
      \begin{tikzpicture}[x=\kf@scale in,y=\kf@scale in]
        \clip (0, 0) rectangle (\kf@width, \kf@height);
        % debug: timestamp centre bottom
        \node at (\kfox ,1) {\footnotesize \t};
        #2
      \end{tikzpicture}
    }
}}


%% UTILITIES %%

%% ! convention: /kf@x@<name> are temp registers.
%% ! convention: /kf@l@<name> are temp legngth registers.
\newlength{\kf@l@a}
\newlength{\kf@l@b}


%% cubic step function
\newcommand\kfsmoothstep[1]{
  \pgfmathsetmacro\kf@x@a{#1}
  \pgfmathtruncatemacro\kf@x@b{\kf@x@a < 0 || \kf@x@a > 1 ? 0 : 1}
  \ifnum\kf@x@b=1
  \pgfmathparse{3*\kf@x@a^2-2*\kf@x@a^3}
  \else
  \pgfmathparse{\kf@x@a < 0 ? 0 : 1}
  \fi
}

%% interpolation
\pgfkeys{
  /kf/interpolate/.is family, /kf/interpolate,
  start/.estore in=\kf@interpolate@start,
  duration/.estore in=\kf@interpolate@duration,
  default/.style={
    start=0,
    duration=1,
  },
}

\newcommand\kfinterpolate[3][]{
  % #1 - args
  % #2 - start value
  % #3 - end value
  \pgfkeys{/kf/interpolate, default, #1}
  \kfsmoothstep{(\t - (\kf@interpolate@start))/(\kf@interpolate@duration)}
  \pgfmathparse{(#2)*(1-\pgfmathresult) + (#3)*\pgfmathresult}
}

%% conditional rendering
\newcommand\kftimemask[3]{{
    \pgfmathtruncatemacro\kf@x@a{((#1) <= \t && \t < (#2)) ? 1 : 0}
    \ifnum\kf@x@a=1{#3}\fi
}}



%% drawing text
\pgfkeys{
  /kf/text/.is family, /kf/text,
  offset radius/.estore in=\kf@text@offset@radius,
  offset angle/.estore in=\kf@text@offset@angle,
  %
  start/.estore in=\kf@text@start,
  end/.store in=\kf@text@end, % ! don't expand; default depends on start & duration
  duration/.estore in=\kf@text@duration,
  direction/.is choice,
  direction/left/.code={
    \def\kf@text@hiddenx{-\kf@l@a}
    \def\kf@text@hiddeny{0}
  },
  direction/right/.code={
    \def\kf@text@hiddenx{\kf@l@a}
    \def\kf@text@hiddeny{0}
  },
  direction/top/.code={
    \def\kf@text@hiddenx{0}
    \def\kf@text@hiddeny{\kf@l@b}
  },
  direction/bottom/.code={
    \def\kf@text@hiddenx{0}
    \def\kf@text@hiddeny{-\kf@l@b}
  },
  direction/.default=bottom,
  %
  default/.style={
    offset radius=0,
    offset angle=0,
    start=0,
    duration=1,
    end=\kf@text@start+\kf@text@duration,
  },
}

\newcommand\kftext[4][]{{
    \pgfkeys{/kf/text, default, #1}
    \node at (
          {#2+(\kf@text@offset@radius)*cos(\kf@text@offset@angle r)},
          {#3+(\kf@text@offset@radius)*sin(\kf@text@offset@angle r)}
          ) {#4};
}}
\newcommand\kftext@transition[6][]{{
    \pgfkeys{/kf/text, default, direction, #1}
    % #1 - text x co-ordinate
    % #2 - text y co-ordinate
    % #3 - text body
    \kftimemask{\kf@text@start}{\kf@text@end}{
      % default text location
      \pgfmathsetmacro\kf@x@a{#2+(\kf@text@offset@radius)*cos(\kf@text@offset@angle r)}
      \pgfmathsetmacro\kf@x@b{#3+(\kf@text@offset@radius)*sin(\kf@text@offset@angle r)}

      % figure out bounding box
      \settowidth{\kf@l@a}{\pgfinterruptpicture #4 \endpgfinterruptpicture}
      \settoheight{\kf@l@b}{\pgfinterruptpicture #4 \endpgfinterruptpicture}
      
      \begin{scope}[shift={(\kf@x@a, \kf@x@b)}]
        % hack so that outros have the correct timing
        \ifnum#5=0 \pgfmathsetmacro\kf@text@start{\kf@text@end-\kf@text@duration} \fi
        \kfinterpolate[start=\kf@text@start, duration=\kf@text@duration]{#5}{#6}
        \pgfmathsetmacro\kf@x@e\pgfmathresult
        % render text, offset but clipped to bounding box
        \clip (-\kf@l@a/2, -\kf@l@b/2) rectangle (\kf@l@a/2, \kf@l@b/2);
        \kftext{\kf@x@e*\kf@text@hiddenx}{\kf@x@e*\kf@text@hiddeny}{#4}
      \end{scope}
    }
}}
\newcommand\kftextin[4][]{\kftext@transition[#1]{#2}{#3}{#4}{1}{0}}
\newcommand\kftextout[4][]{\kftext@transition[#1]{#2}{#3}{#4}{0}{1}}
